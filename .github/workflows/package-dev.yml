name: CI for Laravel Package

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  pull-code-and-install-deps:
    name: "Pull code and install deps"
    runs-on: 'digital-ocean'
    steps:
      - uses: actions/checkout@v4

      - name: Copy .env files
        run: |
          cp /home/runner/envs/.env.ci ./.env.testing;
          cp /home/runner/envs/.env.ci ./.env;

      - name: Replace phpunit config
        run: |
          cp /home/runner/envs/phpunits/phpunit-package.xml phpunit.xml

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

  check-convention:
    name: 'Checking coding convention'
    runs-on: 'digital-ocean'
    needs:
      - pull-code-and-install-deps

    steps:
      - name: "Check code convention"
        run: composer run-script check:convention

  unit-tests:
    name: "Run PHP Unit Test"
    runs-on: 'digital-ocean'
    needs:
      - pull-code-and-install-deps

    steps:
      - name: Drop db if exist
        run: mysqladmin -h127.0.0.1 -u${{ secrets.CI_MYSQL_USER }} --password="${{ secrets.CI_MYSQL_PASSWORD }}" -f drop ${{ vars.CI_MYSQL_DB_NAME }} || true

      - name: Create Database
        run: mysqladmin -h127.0.0.1 -u${{ secrets.CI_MYSQL_USER }} --password="${{ secrets.CI_MYSQL_PASSWORD }}" create ${{ vars.CI_MYSQL_DB_NAME }}

      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
        run: composer run-script test

  code-coverage:
    name: 'Check code coverage'
    runs-on: 'digital-ocean'
    needs:
      - check-convention
      - unit-tests
    steps:
      - name: Run test coverage
        run: composer run-script test:coverage

      - name: Make code coverage badge
        uses: timkrase/phpunit-coverage-badge@v1.2.1
        with:
          coverage_badge_path: output/coverage.svg
          push_badge: false

      - name: Git push to image-data branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_dir: ./output
          publish_branch: image-data
          github_token: ${{ secrets.GITHUB_TOKEN }}
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

