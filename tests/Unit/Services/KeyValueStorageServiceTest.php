<?php

namespace Minhducck\KeyValueDataStorage\Test\Unit\Services;

use Carbon\Carbon;
use Minhducck\KeyValueDataStorage\Exceptions\InvalidInputException;
use Minhducck\KeyValueDataStorage\Exceptions\UnableToSaveException;
use Minhducck\KeyValueDataStorage\Providers\KeyValueDataObjectServiceProvider;
use Minhducck\KeyValueDataStorage\Services\KeyValueStorageService;
use Orchestra\Testbench\TestCase;

/**
 * @coversDefaultClass KeyValueStorageService
 */
class KeyValueStorageServiceTest extends TestCase
{
    private KeyValueStorageService $serviceInstance;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->serviceInstance = new KeyValueStorageService();
    }

    protected function getPackageProviders($app): array
    {
        return [KeyValueDataObjectServiceProvider::class];
    }

    public function testSaveOnEmptyData()
    {
        $this->expectException(InvalidInputException::class);
        $this->expectExceptionMessage('Unable to save empty objects');
        $this->serviceInstance->save([]);
    }

    public function testSaveWithConflict()
    {
        $this->expectException(UnableToSaveException::class);
        $this->expectExceptionMessage('Unable to save key-values.');
        \Carbon\Carbon::setTestNow(\Carbon\Carbon::now());
        $this->serviceInstance->save(['test' => 'conflict']);
        $this->serviceInstance->save(['test' => 'conflict']);
    }

    public function testRetrieveKeyValueObject()
    {
        $timeDiffBetweenTwoSaveEvent = 50;
        $timeSave1 = $this->serviceInstance->save(['sample' => 'test']);
        \Carbon\Carbon::setTestNow(Carbon::createFromTimestampUTC($timeSave1+$timeDiffBetweenTwoSaveEvent));
        $timeSave2 = $this->serviceInstance->save(['sample' => 'test2']);

        $latestSampleValue = $this->serviceInstance->retrieve('sample');
        $sampleValueAtTimeSave1 = $this->serviceInstance->retrieve('sample', $timeSave1);

        $this->assertArrayHasKey('sample', $latestSampleValue);
        $this->assertEquals('test2', $latestSampleValue['sample']);

        $this->assertArrayHasKey('sample', $sampleValueAtTimeSave1);
        $this->assertEquals('test', $sampleValueAtTimeSave1['sample']);


        $valueAtTime2String = $this->serviceInstance->retrieve(
            'sample',
            Carbon::createFromTimestamp($timeSave2)->toDateTimeString()
        );
        $this->assertArrayHasKey('sample', $sampleValueAtTimeSave1);
        $this->assertEquals('test2', $valueAtTime2String['sample']);
    }

    public function testCreateQueryTimeWhenTimestampNull()
    {
        $reflector = (new \ReflectionClass($this->serviceInstance));
        $method = $reflector->getMethod('createQueryTime');
        $method->setAccessible(true);

        $now = \Carbon\Carbon::now();
        \Carbon\Carbon::setTestNow($now);
        $this->assertEquals($method->invoke($this->serviceInstance, null), $now);
    }
}